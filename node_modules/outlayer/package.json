{
  "_args": [
    [
      {
        "raw": "outlayer@^2.1.0",
        "scope": null,
        "escapedName": "outlayer",
        "name": "outlayer",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "H:\\WorkSpace\\HTML5\\bootstrap obj\\Apropject\\node_modules\\masonry-layout"
    ]
  ],
  "_from": "outlayer@>=2.1.0 <3.0.0",
  "_id": "outlayer@2.1.0",
  "_inCache": true,
  "_location": "/outlayer",
  "_nodeVersion": "4.2.4",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/outlayer-2.1.0.tgz_1461756257347_0.09434349066577852"
  },
  "_npmUser": {
    "name": "desandro",
    "email": "desandrocodes@gmail.com"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "outlayer@^2.1.0",
    "scope": null,
    "escapedName": "outlayer",
    "name": "outlayer",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/masonry-layout"
  ],
  "_resolved": "https://registry.npmjs.org/outlayer/-/outlayer-2.1.0.tgz",
  "_shasum": "83b7beefc19becd3278c8ade988d268788d6f93d",
  "_shrinkwrap": null,
  "_spec": "outlayer@^2.1.0",
  "_where": "H:\\WorkSpace\\HTML5\\bootstrap obj\\Apropject\\node_modules\\masonry-layout",
  "author": {
    "name": "David DeSandro"
  },
  "bugs": {
    "url": "https://github.com/metafizzy/outlayer/issues"
  },
  "dependencies": {
    "ev-emitter": "^1.0.0",
    "fizzy-ui-utils": "^2.0.0",
    "get-size": "^2.0.2"
  },
  "description": "the brains and guts of a layout library",
  "devDependencies": {
    "jquery": ">=1.4.3 <4",
    "jquery-bridget": "2.x",
    "qunitjs": "^1.17.0"
  },
  "directories": {
    "doc": "docs",
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "shasum": "83b7beefc19becd3278c8ade988d268788d6f93d",
    "tarball": "https://registry.npmjs.org/outlayer/-/outlayer-2.1.0.tgz"
  },
  "gitHead": "910f139591665752a0e779460438a6404eed4977",
  "homepage": "https://github.com/metafizzy/outlayer",
  "keywords": [
    "DOM",
    "layout"
  ],
  "license": "MIT",
  "main": "outlayer.js",
  "maintainers": [
    {
      "name": "desandro",
      "email": "desandrocodes@gmail.com"
    }
  ],
  "name": "outlayer",
  "optionalDependencies": {},
  "readme": "# Outlayer\n\n_Brains and guts of a layout library_\n\nOutlayer is a base layout class for layout libraries like [Isotope](http://isotope.metafizzy.co), [Packery](http://packery.metafizzy.co), and [Masonry](http://masonry.desandro.com)\n\nOutlayer layouts work with a container element and children item elements.\n\n``` html\n<div class=\"grid\">\n  <div class=\"item\"></div>\n  <div class=\"item\"></div>\n  <div class=\"item\"></div>\n  ...\n</div>\n```\n\n## Install\n\nInstall with [Bower](http://bower.io): `bower install outlayer`\n\n[Install with npm](http://npmjs.org/package/outlayer): `npm install outlayer`\n\n## Outlayer.create()\n\nCreate a layout class with `Outlayer.create()`\n\n``` js\nvar Layout = Outlayer.create( namespace );\n// for example\nvar Masonry = Outlayer.create('masonry');\n```\n\n+ `namespace` _{String}_ should be camelCased\n+ returns `LayoutClass` _{Function}_\n\nCreate a new layout class. `namespace` is used for jQuery plugin, and for declarative initialization.\n\nThe `Layout` inherits from [`Outlayer.prototype`](docs/outlayer.md).\n\n```\nvar elem = document.querySelector('.selector');\nvar msnry = new Masonry( elem, {\n  // set options...\n  columnWidth: 200\n});\n```\n\n## Item\n\nLayouts work with Items, accessible as `Layout.Item`. See [Item API](docs/item.md).\n\n## Declarative\n\nAn Outlayer layout class can be initialized via HTML, by setting an attribute of `data-namespace` on the element. Options are set in JSON. For example:\n\n``` html\n<!-- var Masonry = Outlayer.create('masonry') -->\n<div class=\"grid\" data-masonry='{ \"itemSelector\": \".item\", \"columnWidth\": 200 }'>\n  ...\n</div>\n```\n\nThe declarative attributes and class will be dashed. i.e. `Outlayer.create('myNiceLayout')` will use `data-my-nice-layout` as the attribute.\n\n## .data()\n\nGet a layout instance from an element.\n\n```\nvar myMasonry = Masonry.data( document.querySelector('.grid') );\n```\n\n## jQuery plugin\n\nThe layout class also works as jQuery plugin.\n\n``` js\n// create Masonry layout class, namespace will be the jQuery method\nvar Masonry = Outlayer.create('masonry');\n// rock some jQuery\n$( function() {\n  // .masonry() to initialize\n  var $grid = $('.grid').masonry({\n    // options...\n  });\n  // methods are available by passing a string as first parameter\n  $grid.masonry( 'reveal', elems );\n});\n```\n\n## RequireJS\n\nTo use Outlayer with [RequireJS](http://requirejs.org/), you'll need to set some config.\n\nSet [baseUrl](http://requirejs.org/docs/api.html#config-baseUrl) to bower_components and set a [path config](http://requirejs.org/docs/api.html#config-paths) for all your application code.\n\n``` js\nrequirejs.config({\n  baseUrl: 'bower_components',\n  paths: {\n    app: '../'\n  }\n});\n\nrequirejs( [ 'outlayer/outlayer', 'app/my-component.js' ], function( Outlayer, myComp ) {\n  new Outlayer( /*...*/ )\n});\n```\n\nOr set a path config for all Outlayer dependencies.\n\n``` js\nrequirejs.config({\n  paths: {\n    'ev-emitter': 'bower_components/ev-emitter',\n    'get-size': 'bower_components/get-size',\n    'matches-selector': 'bower_components/matches-selector'\n  }\n});\n```\n\n## MIT license\n\nOutlayer is released under the [MIT license](http://desandro.mit-license.org).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/metafizzy/outlayer.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.1.0"
}
